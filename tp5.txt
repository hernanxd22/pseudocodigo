/*
Respuestas
Ordenamiento por Insercion:
    Este algoritmo construye una lista ordenada de manera incremental.
    Comienza con un elemento y lo inserta en la posiciC3n correcta en una lista ya ordenada,
    repitiendo el proceso para cada elemento restante.

Algoritmo de la Burbuja: Este metodo compara pares de elementos
    adyacentes y los intercambia si estC!n en el orden incorrecto.
    Se repite hasta que no se requiere mC!s intercambio, lo que significa que
    la lista estC! ordenada.

Ordenamiento por Seleccion:
    Consiste en dividir la lista en dos partes:
    la ordenada y la desordenada. Se busca el elemento mas pequeC1o
    y se reemplaza con la desordenada, busca el valor mayor a medida que hace una pasada y,
    despuC)s de completar la pasada, lo pone en la ubicación correcta. Al igual que con un ordenamiento burbuja

Algoritmo Quick-Sort: Utiliza la tecnica de "divide y venceras".
    Se elige un elemento como pivote y se reorganizan los elementos de tal manera que los menores
    que el pivote quedan a su izquierda y los mayores a su derecha.
    Luego se aplica recursivamente a las sublistas.

Algoritmos de busqueda:
    Busqueda Secuencial: Recorre cada elemento de la lista secuencialmente hasta encontrar
    el objetivo o hasta que se haya revisado toda la lista.

Busqueda Binaria: Este metodo requiere que la lista este ordenada.
    Divide la lista en mitades, comparando el valor medio con el objetivo.
    Si no coincide, decide en cual mitad buscar la lista

*/

import java.util.Scanner;

public class tp5 {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] array = new int[20];

        System.out.println("Seleccione una opción:");
        System.out.println("1. Ordenamiento por Inserción");
        System.out.println("2. Algoritmo de la Burbuja");
        System.out.println("3. Ordenamiento por Selección");
        System.out.println("4. Búsqueda Secuencial");
        System.out.println("5. Crear matriz, calcular promedio y buscar coincidencias");

        int opcion = scanner.nextInt();

        switch (opcion) {
            case 1:
            case 2:
            case 3:

                System.out.println("Ingrese 20 números enteros:");
                for (int i = 0; i < 20; i++) {
                    array[i] = scanner.nextInt();
                }

                System.out.println("Ingrese el orden (ASC o DESC):");
                String orden = scanner.next().toUpperCase();

                System.out.println("Array original:");
                imprimirArray(array);

                switch (opcion) {
                    case 1:
                        insercion(array, orden);
                        break;
                    case 2:
                        burbuja(array, orden);
                        break;
                    case 3:
                        seleccion(array, orden);
                        break;
                }

                System.out.println("Array ordenado:");
                imprimirArray(array);
                break;

            case 4:

                System.out.println("Ingrese el número a buscar:");
                int numero = scanner.nextInt();

                System.out.println("Ingrese 20 números enteros:");
                for (int i = 0; i < 20; i++) {
                    array[i] = scanner.nextInt();
                }

                int posicion = busquedaSecuencial(array, numero);
                if (posicion != -1) {
                    System.out.println("Número encontrado en la posición: " + posicion);
                } else {
                    System.out.println("Número no encontrado.");
                }
                break;

            case 5:

                int filas, columnas;

                do {
                    System.out.print("Ingrese la cantidad de filas (>= 2): ");
                    filas = scanner.nextInt();
                    System.out.print("Ingrese la cantidad de columnas (>= 2): ");
                    columnas = scanner.nextInt();
                } while (filas < 2 || columnas < 2);

                int[][] matriz = new int[filas][columnas];
                System.out.println("Ingrese los valores para la matriz:");
                for (int i = 0; i < filas; i++) {
                    for (int j = 0; j < columnas; j++) {
                        System.out.print("Elemento [" + i + "][" + j + "]: ");
                        matriz[i][j] = scanner.nextInt();
                    }
                }

                // Calcular el promedio
                int suma = 0;
                for (int i = 0; i < filas; i++) {
                    for (int j = 0; j < columnas; j++) {
                        suma += matriz[i][j];
                    }
                }
                int promedio = suma / (filas * columnas);

                boolean encontrado = false;
                System.out.println("Promedio: " + promedio);
                for (int i = 0; i < filas; i++) {
                    for (int j = 0; j < columnas; j++) {
                        if (matriz[i][j] == promedio) {
                            System.out.println("El promedio se encuentra en la posición [" + i + "][" + j + "]");
                            encontrado = true;
                        }
                    }
                }

                if (!encontrado) {
                    System.out.println("No se encontró ninguna coincidencia.");
                }
                break;

            default:
                System.out.println("Opción no válida.");
        }
    }


    public static void insercion(int[] array, String orden) {
        for (int i = 1; i < array.length; i++) {
            int key = array[i];
            int j = i - 1;
            while (j >= 0 && (orden.equals("ASC") ? array[j] > key : array[j] < key)) {
                array[j + 1] = array[j];
                j--;
            }
            array[j + 1] = key;
        }
    }

    public static void burbuja(int[] array, String orden) {
        int n = array.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (orden.equals("ASC") ? array[j] > array[j + 1] : array[j] < array[j + 1]) {
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }
    }

    public static void seleccion(int[] array, String orden) {
        for (int i = 0; i < array.length - 1; i++) {
            int pos = i;
            for (int j = i + 1; j < array.length; j++) {
                if (orden.equals("ASC") ? array[j] < array[pos] : array[j] > array[pos]) {
                    pos = j;
                }
            }
            int temp = array[pos];
            array[pos] = array[i];
            array[i] = temp;
        }
    }

    public static int busquedaSecuencial(int[] array, int valor) {
        for (int i = 0; i < array.length; i++) {
            if (array[i] == valor) {
                return i;
            }
        }
        return -1;
    }

    public static void imprimirArray(int[] array) {
        for (int num : array) {
            System.out.print(num + " ");
        }
        System.out.println();
    }
}